# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#---------------------------------------------------------------------------------------------------------
# Kafka Broker JMX Metrics :
# Compatible with version Apache Kafka v2.x.x / Confluent Plateform 5.x.x
#---------------------------------------------------------------------------------------------------------
hostPort: kafka102:9992
lowercaseOutputName: true
lowercaseOutputLabelNames: true

#Whitelist is used to reduce scrapping time
#whitelistObjectNames:
#  - java.lang:*
#  - kafka.cluster:*
#  - kafka.controller:*
#  - kafka.log:*
#  - kafka.server:type=KafkaServer,name=BrokerState
#  - kafka.server:type=KafkaRequestHandlerPool,*
#  - kafka.server:type=BrokerTopicMetrics,*
#  #  - kafka.server:type=DelayedFetchMetrics,*
#  #  - kafka.server:type=DelayedOperationPurgatory,*
#  - kafka.server:type=FetcherLagMetrics,*
#  - kafka.server:type=FetcherStats,*
#  - kafka.server:type=Request,*
#  - kafka.server:type=Fetch,*
#  - kafka.server:type=Produce,*
#  - kafka.server:type=ReplicaManager,*
#  - kafka.server:type=ReplicaFetcherManager,*
#  - kafka.server:type=SessionExpireListener,*
#  - kafka.server:type=controller-channel-metrics,*
#  - kafka.server:type=socket-server-metrics,*
#  - kafka.network:type=RequestChannel,*
#  - kafka.network:type=Processor,*
#  - kafka.network:type=SocketServer,*
#  - kafka.network:type=RequestMetrics,*
#  #  - kafka.network:type=RequestMetrics,name=*,request=OffsetCommit,version=*
#  #  - kafka.network:type=RequestMetrics,name=*,request=FetchConsumer,version=*
#  #  - kafka.network:type=RequestMetrics,name=*,request=FetchFollower,version=*
#  #  - kafka.network:type=RequestMetrics,name=*,request=Produce,version=*
#  #  - kafka.network:type=RequestMetrics,name=*,request=Metadata,version=*
#  - kafka.coordinator.group:*
#blacklistObjectNames:
#  - java.lang:type=ClassLoading,*
#  - java.lang:type=Compilation,*
#  - java.lang:type=MemoryManager,*
#  - kafka.utils:*
#  - kafka.controller:type=ControllerChannelManager,name=QueueSize,*
#  # Following metrics are exposed per topics
#  - kafka.log:type=Log,name=LogEndOffset,*
#  - kafka.log:type=Log,name=LogStartOffset,*
#  - kafka.cluster:type=Partition,name=InSyncReplicasCount,*
#  - kafka.cluster:type=Partition,name=LastStableOffsetLag,*
#  - kafka.cluster:type=Partition,name=ReplicasCounts,*
#  - kafka.cluster:type=Partition,name=UnderReplicated,*
#  - kafka.server:type=BrokerTopicMetrics,name=TotalFetchRequestsPerSec,*
#  - kafka.server:type=BrokerTopicMetrics,name=TotalProduceRequestsPerSec,*
#  - kafka.server:type=BrokerTopicMetrics,name=FailedProduceRequestsPerSec,*
#  - kafka.server:type=BrokerTopicMetrics,name=FailedFetchRequestsPerSec,*
#  - kafka.server:type=BrokerTopicMetrics,name=BytesRejectedPerSec,*

#rules:
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaServers : State of broker server
#  #
#  #  - BrokerState
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=KafkaServer, name=BrokerState><>Value
#    name: kafka_server_brokerstate
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # Partition : Number of partitions for each broker
#  # - InSyncReplicasCount
#  # - LastStableOffsetLag
#  # - ReplicasCount
#  # - UnderReplicated
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.cluster<type=Partition, name=([^,]+), topic=([^,]+), partition=([^,]+)><>Value
#    name: kafka_cluster_partition_$1
#    labels:
#      topic: $2
#      partition: $3
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaController :
#  #
#  #  - ActiveControllerCount, OfflinePartitionsCount, PreferredReplicaImbalanceCount
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.controller<type=KafkaController, name=([^,]+)><>Value
#    name: kafka_controller_$1
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # ControllerStats : The event that is currently being processed by the elected broker controller.
#  #
#  #  - LeaderElectionRateAndtimeMs, UncleanLeaderElectionsPerSec, AutoLeaderBalanceRateAndTimeMs, ManualLeaderBalanceRateAndTimeMs
#  #  - ControllerChangeRateAndTimeMs,
#  #  - TopicChangeRateAndTimeMs, TopicDeletionRateAndTimeMs, PartitionReassignmentRateAndTimeMs
#  #  - IsrChangeRateAndTimeMs
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.controller<type=ControllerStats, name=([^,]+)><>(OneMinuteRate|Mean|75thPercentile|99thPercentile)
#    name: kafka_controller_stats_$1
#    labels:
#      aggregate: $2
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # Coordinator : GroupMetadataManager
#  #
#  #  - NumGroups, NumOffsets
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.coordinator.group<type=GroupMetadataManager, name=([^,]+)><>(Value)
#    name: kafka_coordinator_group_metadata_manager_$1
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # Logs :
#  #
#  #  - LogEndOffset, LogStartOffset, NumLogSegments, Size
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.log<type=Log, name=([^,]+), topic=([^,]+), partition=([^,]+)><>Value
#    name: kafka_log_$1
#    labels:
#      topic: $2
#      partition: $3
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # LogCleaner :
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.log<type=LogCleaner, name=cleaner-recopy-percent><>(Value)
#    name: kafka_log_cleaner_recopy_percent
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#
#  - pattern: kafka.log<type=LogCleaner, name=max-clean-time-secs><>(Value)
#    name: kafka_log_cleaner_max_clean_time_secs
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#
#  - pattern: kafka.log<type=LogCleaner, name=max-buffer-utilization-percent><>(Value)
#    name: kafka_log_cleaner_max_buffer_utilization_percent
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # LogCleanerManager :
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.log<type=LogCleanerManager, name=max-dirty-percent><>(Value)
#    name: kafka_log_cleaner_manager_max_dirty_percent
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # LogFlushStats :
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.log<type=LogFlushStats, name=LogFlushRateAndTimeMs><>(\w+)
#    name: kafka_log_flush_stats_rate_and_time_ms
#    labels:
#      aggregate: $1
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaRequestHandlerPool : Latency
#  #
#  # - KafkaRequestHandlerPool
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>(\w+)
#    name: kafka_server_request_handler_avg_idle_percent
#    labels:
#      aggregate: $1
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # Network Socket Server : Latency
#  #
#  # - NetworkProcessorAvgIdlePercent
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.network<type=SocketServer, name=NetworkProcessorAvgIdlePercent><>(Value)
#    name: kafka_network_socket_server_processor_avg_idle_percent
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # Network Processor : Latency
#  #
#  # - IdlePercent
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.network<type=Processor, name=IdlePercent, networkProcessor=([0-9]+)><>(Value)
#    name: kafka_network_processor_idle_percent
#    labels:
#      processor: $1
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # Network KafkaRequestChannel :
#  #
#  # - RequestQueueSize, ResponseQueueSize
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.network<type=RequestChannel, name=(\w+)QueueSize><>Value
#    name: kafka_network_request_channel_queue_size
#    labels:
#      queue: $1
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # Network KafkaRequest :
#  #
#  # - RequestPerSec,
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.network<type=RequestMetrics, name=RequestsPerSec, request=(\w+), version=([0-9]+)><>(OneMinuteRate|Mean)
#    name: kafka_network_request_per_sec
#    labels:
#      request: $1
#      version: $2
#      aggregate: $3
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # Network KafkaRequestMetrics :
#  #
#  # - LocalTimeMs, RemoteTimeMs,
#  # - RequestQueueTimeMs,
#  # - ResponseQueueTimeMs, ResponseSendTimeMs
#  # - ThrottleTimeMs
#  # - TotalTimeMs
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.network<type=RequestMetrics, name=(\w+)TimeMs, request=(Produce|Fetch|FetchConsumer|FetchFollower)><>(OneMinuteRate|Mean|75thPercentile|99thPercentile)
#    name: kafka_network_request_metrics_time_ms
#    labels:
#      scope: $1
#      request: $2
#      aggregate: $3
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaServer / BrokerTopicMetrics - I/O metrics :
#  #
#  # - BytesInPerSec, BytesOutPerSec, BytesRejectedPerSec,
#  # - FailedFetchRequestsPerSec, FailedProduceRequestsPerSec,MessagesInPerSec,
#  # - TotalFetchRequestPerSec, TotalProduceRequestPerSec, ReplicationBytesInPerSec, ReplicationBytesOutPerSec
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=BrokerTopicMetrics, name=(BytesInPerSec|BytesOutPerSec|MessagesInPerSec|ReplicationBytesOutPerSec|ReplicationBytesInPerSec)><>(OneMinute)Rate
#    name: kafka_server_broker_topic_metrics_$1_rate
#    labels:
#      aggregate: $2
#      service: kafka-broker
#      env: cluster-demo
#
#  - pattern: kafka.server<type=BrokerTopicMetrics, name=(BytesInPerSec|BytesOutPerSec|MessagesInPerSec|ReplicationBytesOutPerSec|ReplicationBytesInPerSec), topic=([^,]+)><>(OneMinute)Rate
#    name: kafka_server_broker_topic_metrics_$1_rate
#    labels:
#      topic: $2
#      aggregate: $3
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaServer / DelayedFetchMetrics :
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=DelayedFetchMetrics, name=ExpiresPerSec, fetcherType=([^,]+)><>([^,]+)Rate
#    name: kafka_server_delayed_fetch_expires_per_sec
#    labels:
#      fetcher_type: $1
#      aggregate: $2
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaServer / DelayedOperationPurgatory :
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=DelayedOperationPurgatory, name=([^,]+), delayedOperation=([^,]+)><>Value
#    name: kafka_server_delayed_operation_purgatory_$1
#    labels:
#      operation: $2
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # FetcherLagMetrics : Lag in number of messages per follower replica
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=FetcherLagMetrics, name=([^,]+), clientId=([^,]+), topic=([^,]+), partition=([^,]+)><>Value
#    name: kafka_server_fetcher_lag_$1
#    labels:
#      client_id: $2
#      topic: $3
#      partition: $4
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # FetcherStats : Replica Fetcher Thread stats
#  # - BytesPerSec / RequestsPerSec
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=FetcherStats, name=([^,]+), clientId=([^,]+), brokerHost=([^,]+), brokerPort=([^,]+)><>([^,]+)Rate
#    name: kafka_server_fetcher_stats_$1
#    labels:
#      client_id: $2
#      broker_host: $3
#      broker_port: $4
#      aggregate: $5
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaServer Request :
#  # - request-time - Tracking request-time per user/client-id
#  # - throttle-time - Tracking average throttle-time per user/client-id
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=Request, client-id=([^,]+)><>(request-time|throttle-time)
#    name: kafka_server_request_$2
#    labels:
#      client_id: $1
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaServer  Fetcher/Producer :
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=Fetch, client-id=([^,]+)><>(byte-rate|throttle-time)
#    name: kafka_server_fetch_client_$2
#    labels:
#      client_id: $1
#      service: kafka-broker
#      env: cluster-demo
#
#  - pattern: kafka.server<type=Produce, client-id=([^,]+)><>(byte-rate|throttle-time)
#    name: kafka_server_produce_client_$2
#    labels:
#      client_id: $1
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  # ReplicaManager :
#  #     - IsrExpandsPerSec, IsrShrinksPerSec, FailedIsrUpdatesPerSec
#  #     - LeaderCount, PartitionCount, UnderReplicatedPartitions)
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=ReplicaManager, name=([^,]+)><>([^,]+)Rate
#    name: kafka_server_replica_manager_$1
#    labels:
#      aggregate: $2
#      service: kafka-broker
#      env: cluster-demo
#
#  - pattern: kafka.server<type=ReplicaManager, name=([^,]+)><>(Value)
#    name: kafka_server_replica_manager_$1
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # ReplicaFetcherManager :
#  #     - MaxLag, MinFetchRate
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=ReplicaFetcherManager, name=([^,]+), clientId=([^,]+)><>(Value)
#    name: kafka_server_replica_fetcher_manager_$1_value
#    labels:
#      client_id: $2
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # Zookeeper / SessionExpireListener :
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=SessionExpireListener, name=([^,]+)><>([^,]+)Rate
#    name: kafka_zookeeper_session_expire_listener_$1
#    labels:
#      aggregate: $2
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # ControllerChannelMetrics:
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=controller-channel-metrics, broker-id=([^,]+)><>(\w*)
#    name: kafka_server_controller_channel_metrics_$2
#    labels:
#      broker_id: $1
#      service: kafka-broker
#      env: cluster-demo
#
#  #-------------------------------------------------------------------------------------------------------
#  # KafkaServer / Socket Server Metrics
#  #-------------------------------------------------------------------------------------------------------
#  - pattern: kafka.server<type=socket-server-metrics, networkProcessor=([^,]+)><>(\w*)
#    name: kafka_server_socket_server_metrics_$2
#    labels:
#      network_processor: $1
#      service: kafka-broker
#      env: cluster-demo
#  #-------------------------------------------------------------------------------------------------------
#  #
#  # Broker / JVM
#  #-------------------------------------------------------------------------------------------------------
#  # JVM GarbageCollector
#  #
#  - pattern: 'java.lang<type=GarbageCollector, name=(.*)><>CollectionCount'
#    name: kafka_jvm_gc_collection_count
#    labels:
#      name: $1
#      service: kafka-broker
#      env: cluster-demo
#
#  - pattern: 'java.lang<type=GarbageCollector, name=(.*)><>CollectionTime'
#    name: kafka_jvm_gc_collection_time
#    labels:
#      name: $1
#      service: kafka-broker
#      env: cluster-demo
#
#  - pattern: java.lang<type=GarbageCollector,name=(.*)><LastGcInfo, duration>
#    name: kafka_jvm_last_gc_duration
#    labels:
#      name: $1
#      service: kafka-broker
#      env: cluster-demo
#    attrNameSnakeCase: true
#
#  - pattern: 'java.lang<type=GarbageCollector, name=([^,]+), key=(.*)><LastGcInfo, memoryUsage(\w+)Gc>(\w+)'
#    name: kafka_jvm_last_gc_memory_usage_$4
#    labels:
#      name: $1
#      space: $2
#      type: $4
#      service: kafka-broker
#      env: cluster-demo
#    attrNameSnakeCase: true
#
#  # JVM Memory
#  - pattern: java.lang<type=Memory><HeapMemoryUsage>(\w*)
#    name: kafka_jvm_heap_usage
#    labels:
#      type: $1
#      service: kafka-broker
#      env: cluster-demo
#    attrNameSnakeCase: true
#
#  - pattern: java.lang<type=Memory><NonHeapMemoryUsage>(\w*)
#    name: kafka_jvm_non_heap_usage
#    labels:
#      type: $1
#      service: kafka-broker
#      env: cluster-demo
#    attrNameSnakeCase: true
#
#  - pattern: 'java.lang<type=MemoryPool, name=(.*)><CollectionUsage>(\w*)'
#    name: kafka_jvm_memory_pool_collection_usage
#    labels:
#      name: $1
#      type: $2
#      service: kafka-broker
#      env: cluster-demo
#  - pattern: 'java.lang<type=MemoryPool, name=(.*)><Usage>(\w*)'
#    name: kafka_jvm_memory_pool_usage
#    labels:
#      name: $1
#      type: $2
#      service: kafka-broker
#      env: cluster-demo
#  - pattern: 'java.lang<type=MemoryPool, name=(.*)><PeakUsage>(\w*)'
#    name: kafka_jvm_memory_pool_peak_usage
#    labels:
#      name: $1
#      type: $2
#      service: kafka-broker
#      env: cluster-demo
#
#  # JVM Thread
#  - pattern: java.lang<type=Threading><>(\w*thread_count)
#    name: kafka_jvm_$1
#    labels:
#      service: kafka-broker
#      env: cluster-demo
#    attrNameSnakeCase: true
#
#  # Operating System
#  - pattern: java.lang<type=OperatingSystem><>(\w*)
#    name: kafka_jvm_os_$1
#    labels:
#      service: kafka-broker
#      env: cluster-demo

#rules:
#  - pattern : kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
#    name: kafka_server_$1_$2
#    type: GAUGE
#    labels:
#      clientId: "$3"
#      topic: "$4"
#      partition: "$5"
#  - pattern : kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
#    name: kafka_server_$1_$2
#    type: GAUGE
#    labels:
#      clientId: "$3"
#      broker: "$4:$5"
#  - pattern : kafka.coordinator.(\w+)<type=(.+), name=(.+)><>Value
#    name: kafka_coordinator_$1_$2_$3
#    type: GAUGE
#
#  # Generic per-second counters with 0-2 key/value pairs
#  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
#    name: kafka_$1_$2_$3_total
#    type: COUNTER
#    labels:
#      "$4": "$5"
#      "$6": "$7"
#  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
#    name: kafka_$1_$2_$3_total
#    type: COUNTER
#    labels:
#      "$4": "$5"
#  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
#    name: kafka_$1_$2_$3_total
#    type: COUNTER
#
#  - pattern: kafka.server<type=(.+), client-id=(.+)><>([a-z-]+)
#    name: kafka_server_quota_$3
#    type: GAUGE
#    labels:
#      resource: "$1"
#      clientId: "$2"
#
#  - pattern: kafka.server<type=(.+), user=(.+), client-id=(.+)><>([a-z-]+)
#    name: kafka_server_quota_$4
#    type: GAUGE
#    labels:
#      resource: "$1"
#      user: "$2"
#      clientId: "$3"
#
#  # Generic gauges with 0-2 key/value pairs
#  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
#    name: kafka_$1_$2_$3
#    type: GAUGE
#    labels:
#      "$4": "$5"
#      "$6": "$7"
#  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
#    name: kafka_$1_$2_$3
#    type: GAUGE
#    labels:
#      "$4": "$5"
#  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
#    name: kafka_$1_$2_$3
#    type: GAUGE
#
#  # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
#  #
#  # Note that these are missing the '_sum' metric!
#  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
#    name: kafka_$1_$2_$3_count
#    type: COUNTER
#    labels:
#      "$4": "$5"
#      "$6": "$7"
#  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
#    name: kafka_$1_$2_$3
#    type: GAUGE
#    labels:
#      "$4": "$5"
#      "$6": "$7"
#      quantile: "0.$8"
#  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
#    name: kafka_$1_$2_$3_count
#    type: COUNTER
#    labels:
#      "$4": "$5"
#  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
#    name: kafka_$1_$2_$3
#    type: GAUGE
#    labels:
#      "$4": "$5"
#      quantile: "0.$6"
#  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
#    name: kafka_$1_$2_$3_count
#    type: COUNTER
#  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
#    name: kafka_$1_$2_$3
#    type: GAUGE
#    labels:
#      quantile: "0.$4"
#
#
#  #kafka.connect:type=app-info,client-id="{clientid}"
#  #kafka.consumer:type=app-info,client-id="{clientid}"
#  #kafka.producer:type=app-info,client-id="{clientid}"
#  - pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>start-time-ms'
#    name: kafka_$1_start_time_seconds
#    labels:
#      clientId: "$2"
#    help: "Kafka $1 JMX metric start time seconds"
#    type: GAUGE
#    valueFactor: 0.001
#  - pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>(commit-id|version): (.+)'
#    name: kafka_$1_$3_info
#    value: 1
#    labels:
#      clientId: "$2"
#      $3: "$4"
#    help: "Kafka $1 JMX metric info version and commit-id"
#    type: GAUGE
#
#  #kafka.producer:type=producer-topic-metrics,client-id="{clientid}",topic="{topic}"", partition="{partition}"
#  #kafka.consumer:type=consumer-fetch-manager-metrics,client-id="{clientid}",topic="{topic}"", partition="{partition}"
#  - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), topic=(.+), partition=(.+)><>(.+-total|compression-rate|.+-avg|.+-replica|.+-lag|.+-lead)
#    name: kafka_$2_$6
#    labels:
#      clientId: "$3"
#      topic: "$4"
#      partition: "$5"
#    help: "Kafka $1 JMX metric type $2"
#    type: GAUGE
#
#  #kafka.producer:type=producer-topic-metrics,client-id="{clientid}",topic="{topic}"
#  #kafka.consumer:type=consumer-fetch-manager-metrics,client-id="{clientid}",topic="{topic}"", partition="{partition}"
#  - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), topic=(.+)><>(.+-total|compression-rate|.+-avg)
#    name: kafka_$2_$5
#    labels:
#      clientId: "$3"
#      topic: "$4"
#    help: "Kafka $1 JMX metric type $2"
#    type: GAUGE
#
#  #kafka.connect:type=connect-node-metrics,client-id="{clientid}",node-id="{nodeid}"
#  #kafka.consumer:type=consumer-node-metrics,client-id=consumer-1,node-id="{nodeid}"
#  - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), node-id=(.+)><>(.+-total|.+-avg)
#    name: kafka_$2_$5
#    labels:
#      clientId: "$3"
#      nodeId: "$4"
#    help: "Kafka $1 JMX metric type $2"
#    type: UNTYPED
#
#  #kafka.connect:type=kafka-metrics-count,client-id="{clientid}"
#  #kafka.consumer:type=consumer-fetch-manager-metrics,client-id="{clientid}"
#  #kafka.consumer:type=consumer-coordinator-metrics,client-id="{clientid}"
#  #kafka.consumer:type=consumer-metrics,client-id="{clientid}"
#  - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.*)><>(.+-total|.+-avg|.+-bytes|.+-count|.+-rate|.+-ratio|.+-age|.+-flight|.+-threads|.+-connectors|.+-tasks|.+-ago)
#    name: kafka_$2_$4
#    labels:
#      clientId: "$3"
#    help: "Kafka $1 JMX metric type $2"
#    type: GAUGE
#
#  #kafka.connect:type=connector-task-metrics,connector="{connector}",task="{task}<> status"
#  - pattern: 'kafka.connect<type=connector-task-metrics, connector=(.+), task=(.+)><>status: ([a-z-]+)'
#    name: kafka_connect_connector_status
#    value: 1
#    labels:
#      connector: "$1"
#      task: "$2"
#      status: "$3"
#    help: "Kafka Connect JMX Connector status"
#    type: GAUGE
#
#  #kafka.connect:type=task-error-metrics,connector="{connector}",task="{task}"
#  #kafka.connect:type=source-task-metrics,connector="{connector}",task="{task}"
#  #kafka.connect:type=sink-task-metrics,connector="{connector}",task="{task}"
#  #kafka.connect:type=connector-task-metrics,connector="{connector}",task="{task}"
#  - pattern: kafka.connect<type=(.+)-metrics, connector=(.+), task=(.+)><>(.+-total|.+-count|.+-ms|.+-ratio|.+-avg|.+-failures|.+-requests|.+-timestamp|.+-logged|.+-errors|.+-retries|.+-skipped)
#    name: kafka_connect_$1_$4
#    labels:
#      connector: "$2"
#      task: "$3"
#    help: "Kafka Connect JMX metric type $1"
#    type: GAUGE
#
#  #kafka.connect:type=connector-metrics,connector="{connector}"
#  #kafka.connect:type=connect-worker-metrics,connector="{connector}"
#  - pattern: kafka.connect<type=connect-worker-metrics, connector=(.+)><>([a-z-]+)
#    name: kafka_connect_worker_$2
#    labels:
#      connector: "$1"
#    help: "Kafka Connect JMX metric $1"
#    type: GAUGE
#
#  #kafka.connect:type=connect-worker-metrics
#  - pattern: kafka.connect<type=connect-worker-metrics><>([a-z-]+)
#    name: kafka_connect_worker_$1
#    help: "Kafka Connect JMX metric worker"
#    type: GAUGE
#
#  #kafka.connect:type=connect-worker-rebalance-metrics
#  - pattern: kafka.connect<type=connect-worker-rebalance-metrics><>([a-z-]+)
#    name: kafka_connect_worker_rebalance_$1
#    help: "Kafka Connect JMX metric rebalance information"
#    type: GAUGE
#
#  - pattern: kafka.producer<type=producer-metrics, client-id=(.+)><>(.+):\w*
#    name: kafka_producer_$2
#  - pattern: kafka.consumer<type=consumer-metrics, client-id=(.+)><>(.+):\w*
#    name: kafka_consumer_$2
#  - pattern: kafka.consumer<type=consumer-fetch-manager-metrics, client-id=(.+)><>(.+):\w*
#    name: kafka_consumer_$2

rules:
  # This is by far the biggest contributor to the number of sheer metrics being produced.
  # Always keep it on the top for the case of probability when so many metrics will hit the first condition and exit.
  # "kafka.cluster:type=*, name=*, topic=*, partition=*"
  # "kafka.log:type=*,name=*, topic=*, partition=*"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      topic: "$4"
      partition: "$5"
  # "kafka.server:type=*,name=*, client-id=*, topic=*, partition=*"
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      clientId: "$3"
      topic: "$4"
      partition: "$5"
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      clientId: "$3"
      broker: "$4:$5"
  # "kafka.network:type=*, name=*, request=*, error=*"
  # "kafka.network:type=*, name=*, request=*, version=*"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>(Count|Value)
    name: kafka_$1_$2_$3
    labels:
      "$4": "$5"
      "$6": "$7"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      "$6": "$7"
      quantile: "0.$8"
  # "kafka.rest:type=*, topic=*, partition=*, client-id=*"
  # "kafka.rest:type=*, cipher=*, protocol=*, client-id=*"
  - pattern: kafka.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>Value
    name: kafka_$1_$2
    labels:
      "$3": "$4"
      "$5": "$6"
      "$7": "$8"
  # Count and Value
  # "kafka.server:type=*, name=*, topic=*"
  # "kafka.server:type=*, name=*, clientId=*"
  # "kafka.server:type=*, name=*, delayedOperation=*"
  # "kafka.server:type=*, name=*, fetcherType=*"
  # "kafka.network:type=*, name=*, networkProcessor=*"
  # "kafka.network:type=*, name=*, processor=*"
  # "kafka.network:type=*, name=*, request=*"
  # "kafka.network:type=*, name=*, listener=*"
  # "kafka.log:type=*, name=*, logDirectory=*"
  # "kafka.log:type=*, name=*, op=*"
  # "kafka.rest:type=*, node-id=*, client-id=*"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>(Count|Value)
    name: kafka_$1_$2_$3
    labels:
      "$4": "$5"
  # "kafka.consumer:type=*, topic=*, client-id=*"
  # "kafka.producer:type=*, topic=*, client-id=*"
  # "kafka.rest:type=*, topic=*, client-id=*"
  # "kafka.server:type=*, broker-id=*, fetcher-id=*"
  # "kafka.server:type=*, listener=*, networkProcessor=*"
  - pattern: kafka.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(Count|Value)
    name: kafka_$1_$2
    labels:
      "$3": "$4"
      "$5": "$6"
  # - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
  #   name: kafka_$1_$2
  #   labels:
  #     "$3": "$4"
  #     "$5": "$6"
  #     attribute_name: "$7"
  # "kafka.network:type=*, name=*"
  # "kafka.server:type=*, name=*"
  # "kafka.controller:type=*, name=*"
  # "kafka.databalancer:type=*, name=*"
  # "kafka.log:type=*, name=*"
  # "kafka.utils:type=*, name=*"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(Count|Value)
    name: kafka_$1_$2_$3
  # "kafka.producer:type=*, client-id=*"
  # "kafka.producer:type=*, id=*"
  # "kafka.rest:type=*, client-id=*"
  # "kafka.rest:type=*, http-status-code=*"
  # "kafka.server:type=*, BrokerId=*"
  # "kafka.server:type=*, listener=*"
  # "kafka.server:type=*, id=*"
  - pattern: kafka.(\w+)<type=(.+), (.+)=(.+)><>Value
    name: kafka_$1_$2
    labels:
      "$3": "$4"
  # - pattern: "kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):"
  #   name: kafka_$1_$2
  #   labels:
  #     "$3": "$4"
  #     attribute_name: "$5"
  - pattern: kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>OneMinuteRate
    name: kafka_server_kafkarequesthandlerpool_requesthandleravgidlepercent_total
    type: GAUGE
  # "kafka.server:type=*, listener=*, networkProcessor=*, clientSoftwareName=*, clientSoftwareVersion=*"
  - pattern: kafka.server<type=socket-server-metrics, clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
    name: kafka_server_socketservermetrics_connections
    type: GAUGE
    labels:
      client_software_name: "$1"
      client_software_version: "$2"
      listener: "$3"
      network_processor: "$4"
  - pattern: "kafka.server<type=socket-server-metrics, listener=(.+), networkProcessor=(.+)><>(.+):"
    name: kafka_server_socketservermetrics_$3
    type: GAUGE
    labels:
      listener: "$1"
      network_processor: "$2"
  # - pattern: "kafka.server<type=socket-server-metrics, listener=(.+)><>(.+):"
  #   name: kafka_server_socketservermetrics
  #   type: GAUGE
  #   labels:
  #     listener: "$1"
  #     attribute_name: "$2"
  # "kafka.coordinator.group:type=*, name=*"
  # "kafka.coordinator.transaction:type=*, name=*"
  - pattern: kafka.coordinator.(\w+)<type=(.+), name=(.+)><>(Count|Value)
    name: kafka_coordinator_$1_$2_$3
  # Percentile
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      quantile: "0.$6"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      quantile: "0.$4"
  # Additional Rules for Confluent Server Metrics
  # 'confluent.metadata:type=*, name=*, topic=*, partition=*'
  - pattern: confluent.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(Value|Count)
    name: confluent_$1_$2
    type: GAUGE
    labels:
      "$3": "$4"
      "$5": "$6"
      "$7": "$8"
  # 'confluent.metadata.service:type=*, node-id=*, client-id=*'
  - pattern: confluent.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>Value
    name: confluent_$1_$2
    type: GAUGE
    labels:
      "$3": "$4"
      "$5": "$6"
  # 'confluent.metadata.service:type=*, node-id=*, client-id=*'
  - pattern: 'confluent.metadata.service<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):'
    name: $1
    type: GAUGE
    labels:
      "$2": "$3"
      "$4": "$5"
      attribute_name: "$6"
  # 'confluent.metadata.service:type=*, client-id=*'
  # 'confluent.metadata.service:type=*, id=*'
  # 'confluent.metadata:type=*, name=*'
  # 'confluent.license:type=*, name=*'
  - pattern: confluent.(.+)<type=(.+), (.+)=(.+)><>Value
    name: confluent_$1_$2
    type: GAUGE
    labels:
      "$3": "$4"
  - pattern: 'confluent.(.+)<type=(.+), (.+)=(.+)><>(.+):'
    name: confluent_$1_$2
    type: GAUGE
    labels:
      "$3": "$4"
      attribute_name: "$5"
  # Quotas
  - pattern : 'kafka.server<type=(Produce|Fetch|Request), user=(.+), client-id=(.+)><>(.+):'
    name: kafka_server_$1_$4
    type: GAUGE
    labels:
      user: "$2"
      client-id: "$3"

  - pattern : 'kafka.server<type=(Produce|Fetch|Request), user=(.+)><>(.+):'
    name: kafka_server_$1_$3
    type: GAUGE
    labels:
      user: "$2"

  - pattern : 'kafka.server<type=(Produce|Fetch|Request), client-id=(.+)><>(.+):'
    name: kafka_server_$1_$3
    type: GAUGE
    labels:
      client-id: "$2"

  # "kafka.consumer:type=app-info,client-id=*"
  # "kafka.producer:type=app-info,client-id=*"
  - pattern: "kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)"
    value: 1
    name: kafka_$1_app_info
    labels:
      client_type: $1
      client_id: $2
      $3: $4
    type: UNTYPED
  # "kafka.consumer:type=consumer-metrics,client-id=*, protocol=*, cipher=*"
  # "kafka.consumer:type=type=consumer-fetch-manager-metrics,client-id=*, topic=*, partition=*"
  # "kafka.producer:type=producer-metrics,client-id=*, protocol=*, cipher=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$9
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
      $7: "$8"
  # "kafka.consumer:type=consumer-node-metrics,client-id=*, node-id=*"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*, topic=*"
  # "kafka.producer:type=producer-node-metrics,client-id=*, node-id=*"
  # "kafka.producer:type=producer-topic-metrics,client-id=*, topic=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$7
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*"
  # "kafka.consumer:type=consumer-metrics,client-id=*"
  # "kafka.producer:type=producer-metrics,client-id=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$5
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
  - pattern: "kafka.(.+)<type=(.+)><>(.+):"
    name: kafka_$1_$2_$3
    labels:
      client_type: $1

  # "kafka.schema.registry:type=app-info,id=*"
  - pattern: "kafka.connect<type=app-info, client-id=(.+)><>(.+): (.+)"
    name: "kafka_connect_app_info"
    value: 1
    labels:
      client-id: "$1"
      $2: "$3"
    type: UNTYPED
  # kafka.connect:type=connect-worker-rebalance-metrics
  - pattern: "kafka.connect<type=connect-worker-rebalance-metrics><>([^:]+)"
    name: "kafka_connect_connect_worker_rebalance_metrics_$1"
  # kafka.connect:type=connect-coordinator-metrics,client-id=*
  # kafka.connect:type=connect-metrics,client-id=*
  - pattern: "kafka.connect<type=(.+), client-id=(.+)><>([^:]+)"
    name: kafka_connect_$1_$3
    labels:
      client_id: $2
  # kafka.connect:type=connect-worker-metrics
  - pattern: "kafka.connect<type=connect-worker-metrics><>([^:]+)"
    name: kafka_connect_connect_worker_metrics_$1
    labels:
      connector: "aggregate"
  # kafka.connect:type=connect-worker-metrics,connector=*
  - pattern: "kafka.connect<type=connect-worker-metrics, connector=(.+)><>([^:]+)"
    name: kafka_connect_connect_worker_metrics_$2
    labels:
      connector: $1
  # kafka.connect:type=connector-metrics,connector=*
  - pattern: "kafka.connect<type=connector-metrics, connector=(.+)><>(.+): (.+)"
    value: 1
    name: kafka_connect_connector_metrics
    labels:
      connector: $1
      $2: $3
    type: UNTYPED
  # kafka.connect:type=*-task-metrics,*
  # kafka.connect:type=source-task-metrics,connector=*,task=*
  # kafka.connect:type=sink-task-metrics,connector=*,task=*
  # kafka.connect:type=connector-task-metrics,connector=*,task=*
  - pattern: "kafka.connect<type=(.+)-task-metrics, connector=(.+), task=(\\d+)><>(.+): (.+)"
    name: kafka_connect_$1_task_metrics_$4
    labels:
      connector: "$2"
      task: "$3"
  # kafka.connect:type=task-error-metrics,*
  # kafka.connect:type=task-error-metrics,connector=*,task=*
  - pattern: "kafka.connect<type=task-error-metrics, connector=(.+), task=(\\d+)><>([^:]+)"
    name: kafka_connect_task_error_metrics_$3
    labels:
      connector: "$1"
      task: "$2"
  # confluent.replicator:type=confluent-replicator-task-metrics,* : confluent-replicator-task-topic-partition-*: Number Values
  - pattern: "confluent.replicator<type=confluent-replicator-task-metrics, confluent-replicator-(.*)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+)><>confluent-replicator-task-topic-partition-(.*): (.*)"
    name: confluent_replicator_task_metrics_$9
    labels:
      $1: "$2"
      $3: "$4"
      $5: "$6"
      $7: "$8"
  # confluent.replicator:type=confluent-replicator-task-metrics,* : Strings
  - pattern: "confluent.replicator<type=confluent-replicator-task-metrics, confluent-replicator-(.*)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+)><>(confluent-replicator-destination-cluster|confluent-replicator-source-cluster|confluent-replicator-destination-topic-name): (.*)"
    name: confluent_replicator_task_metrics_info
    value: 1
    labels:
      $1: "$2"
      $3: "$4"
      $5: "$6"
      $7: "$8"
      $9: "$10"
  # "kafka.consumer:type=app-info,client-id=*"
  # "kafka.producer:type=app-info,client-id=*"
  - pattern: "kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)"
    value: 1
    name: kafka_$1_app_info
    labels:
      client_type: $1
      client_id: $2
      $3: $4
    type: UNTYPED
  # "kafka.consumer:type=consumer-metrics,client-id=*, protocol=*, cipher=*"
  # "kafka.consumer:type=type=consumer-fetch-manager-metrics,client-id=*, topic=*, partition=*"
  # "kafka.producer:type=producer-metrics,client-id=*, protocol=*, cipher=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$9
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
      $7: "$8"
  # "kafka.consumer:type=consumer-node-metrics,client-id=*, node-id=*"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*, topic=*"
  # "kafka.producer:type=producer-node-metrics,client-id=*, node-id=*"
  # "kafka.producer:type=producer-topic-metrics,client-id=*, topic=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$7
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*"
  # "kafka.consumer:type=consumer-metrics,client-id=*"
  # "kafka.producer:type=producer-metrics,client-id=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$5
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
  - pattern: "kafka.(.+)<type=(.+)><>(.+):"
    name: kafka_$1_$2_$3
    labels:
      client_type: $1

  # Below rule applies for Zookeeper Cluster having multiple ZK nodes
  # org.apache.ZooKeeperService:name0=*,name3=Connections,name1=*,name2=*,name4=*,name5=*
  - pattern: "org.apache.ZooKeeperService<name0=(.+), name1=replica.(\\d+), name2=(\\w+), name3=Connections, name4=(.+), name5=(.+)><>([^:]+)"
    name: zookeeper_connections_$6
    labels:
      server_name: "$1"
      server_id: $2
      client_address: "$4"
      connection_id: "$5"
      member_type: "$3"
  - pattern: "org.apache.ZooKeeperService<name0=(.+), name1=replica.(\\d+), name2=(\\w+)><>(\\w+): (\\d+)"
    name: zookeeper_$4
    labels:
      server_name: "$1"
      server_id: $2
      member_type: "$3"
  # Below rule applies for Zookeeper Cluster having multiple ZK nodes
  # org.apache.ZooKeeperService:name0=*,name3=InMemoryDataTree
  - pattern: "org.apache.ZooKeeperService<name0=(.+), name1=replica.(\\d+), name2=(\\w+), name3=InMemoryDataTree><>(WatchCount|NodeCount): (\\d+)"
    name: zookeeper_inmemorydatatree_$4
    type: GAUGE
    labels:
      server_name: "$1"
      server_id: $2
      member_type: "$3"
  # Below rule applies for Zookeeper Cluster having multiple ZK nodes
  # org.apache.ZooKeeperService:name0=*,name1=replica*
  - pattern: "org.apache.ZooKeeperService<name0=(.+), name1=replica.(\\d+)><>(.+): (.+)"
    name: zookeeper_status
    type: UNTYPED
    value: 1
    labels:
      server_name: "$1"
      server_id: $2
      $3: $4
  # Below rule applies for Zookeeper Cluster having multiple ZK nodes
  # org.apache.ZooKeeperService:name0=*
  - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(QuorumSize): (\\d+)"
    name: zookeeper_status_$2
    type: GAUGE
    labels:
      server_id: $1
  # ###########################################################################
  # ###########################################################################
  # Below rule applies to a Standalone ZK
  # org.apache.ZooKeeperService:name0=*,name1=InMemoryDataTree
  - pattern: "org.apache.ZooKeeperService<name0=(.+), name1=InMemoryDataTree><>(WatchCount|NodeCount): (\\d+)"
    name: zookeeper_inmemorydatatree_$2
    type: GAUGE
    labels:
      server_name: $1
      server_id: "1"
  # Below rule applies to a Standalone ZK
  # org.apache.ZooKeeperService:name0=*,name1=Connections,name2=*,name3=*
  - pattern: "org.apache.ZooKeeperService<name0=(.+), name1=Connections, name2=(.+), name3=(.+)><>([^:]+)"
    name: zookeeper_connections_$4
    labels:
      server_name: "$1"
      client_address: "$2"
      connection_id: "$3"
  # Below rule applies to a Standalone ZK
  # org.apache.ZooKeeperService:name0=*
  - pattern: "org.apache.ZooKeeperService<name0=(.+)><>(StartTime|ClientPort|SecureClientAddress|Version|SecureClientPort): (.+)"
    name: zookeeper_$2
    value: 1
    labels:
      server_name: "$1"
      $2: "$3"
  # Below rule applies to a Standalone ZK
  # org.apache.ZooKeeperService:name0=*
  - pattern: "org.apache.ZooKeeperService<name0=(.+)><>(.+): (.+)"
    name: zookeeper_$2
    type: GAUGE